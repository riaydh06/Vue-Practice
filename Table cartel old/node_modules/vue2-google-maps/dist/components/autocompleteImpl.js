import _Object$assign from 'babel-runtime/core-js/object/assign';
import _omit from 'lodash/omit';
import _pickBy from 'lodash/pickBy';
import _clone from 'lodash/clone';

import propsBinder from '../utils/propsBinder.js';
import downArrowSimulator from '../utils/simulateArrowDown.js';
import getPropsValuesMixin from '../utils/getPropsValuesMixin.js';
import { loaded } from '../manager.js';

var props = {
  bounds: {
    type: Object
  },
  componentRestrictions: {
    type: Object
  },
  types: {
    type: Array,
    default: function _default() {
      return [];
    }
  },
  placeholder: {
    required: false,
    type: String
  },
  selectFirstOnEnter: {
    require: false,
    type: Boolean,
    default: false
  },
  value: {
    type: String,
    default: ''
  },
  options: {
    type: Object
  }
};

export default {
  mixins: [getPropsValuesMixin],

  mounted: function mounted() {
    var _this = this;

    loaded.then(function () {
      var options = _clone(_this.getPropsValues());
      if (_this.selectFirstOnEnter) {
        downArrowSimulator(_this.$refs.input);
      }

      if (typeof google.maps.places.Autocomplete !== 'function') {
        throw new Error('google.maps.places.Autocomplete is undefined. Did you add \'places\' to libraries when loading Google Maps?');
      }

      /* eslint-disable no-unused-vars */
      var finalOptions = _pickBy(_Object$assign({}, _omit(options, ['options', 'selectFirstOnEnter', 'value', 'place', 'placeholder']), options.options), function (v, k) {
        return v !== undefined;
      });

      // Component restrictions is rather particular. Undefined not allowed
      _this.$watch('componentRestrictions', function (v) {
        if (v !== undefined) {
          _this.$autocomplete.setComponentRestrictions(v);
        }
      });

      _this.$autocomplete = new google.maps.places.Autocomplete(_this.$refs.input, finalOptions);
      propsBinder(_this, _this.$autocomplete, _omit(props, ['placeholder', 'place', 'selectFirstOnEnter', 'value', 'componentRestrictions']));

      _this.$autocomplete.addListener('place_changed', function () {
        _this.$emit('place_changed', _this.$autocomplete.getPlace());
      });
    });
  },

  props: props
};